{"name":"Offset-dates","tagline":"js library to play with dates","body":"# offset-dates (version 1.0.12)\r\nLightweigth no-dependencies js library to calculate and play with dates and ranges of dates.\r\n\r\nOne of the key elements is that you can use the range initiator to return a pair of dates, and you can perform operations on those dates through the offset method.\r\n\r\nReleased under the terms of the MIT license. Feel free to use this, fork, contribute or let me know if you would like to see other methods included in the library.\r\n\r\n## Documentation\r\n\r\nTo start using the offsetdate library you just need to include the js file into your code.\r\n\r\n```html\r\n<script src=\"offsetdates.min.js\"></script>\r\n```\r\n\r\nOnce the js file is included, an object called *od* is created and ready to be used. If you don't use any of the helper functions, you will get an object created whit the current system date.  \r\nYou can (and it's strongly recommended that you do) chain functions.\r\n\r\n### Hello world!\r\n\r\nEasy as ever:\r\n```javascript\r\nod.output(); // date in local time\r\n```\r\n\r\n### Chaining \r\nEven when you can do this:\r\n```javascript\r\nvar date1 = od();\r\ndate1.range();\r\ndate1.offset(-2,'weeks');\r\ndate1.output();\r\n```\r\n\r\nyou should do this instead:\r\n```javascript\r\nod().range('week').offset(-2, 'weeks').output();\r\n```\r\n\r\n## Methods\r\n\r\nThe usage can be divided into 4 main sections:\r\n\r\n### 1) Initialization\r\n\r\nThere are two initialization modes, single mode is the default one.\r\n\r\n#### single()\r\nDefault usage, an object with a single date will be created.\r\n\r\n- *Usage:* od.single()\r\n- *Parameters:* none\r\n- *Returns:* none\r\n\r\n#### range()\r\nYou can calculate dates or ranges of dates. two dates will be created: *startDate* and *endDate*. If no period is specified, both start and end date will hold the same date/time value.\r\n\r\n- *Usage:* od.range( [period] )\r\n- *Parameters:*\r\n  - *[period]* String with possible values: week|month|year|quarter\r\n- *Return:* none\r\n- *Example:*\r\n```javascript\r\nod();\r\nod().range();\r\nod().range('week');\r\n```\r\n\r\n### 2) Operations\r\n\r\n#### offset()\r\nOffset (adds or subtract) a specific period of time to the calculated dates, accordingly to the parameters used.\r\n\r\n- *Usage:* offset( amount, period )\r\n- *Parameters:*\r\n  - *amount*: Integer number, used to skip specified period of time.\r\n  - *period*: String value, representation of the period, can be weeks|months|years|periods\r\n- *Return:* none\r\n- *Example:*\r\n```javascript\r\nod.range('week').offset(1,'week');\r\nod.range('week').offset(-1,'week');\r\n```\r\n\r\n#### beginOfDay()\r\nSet time 0:0:00 0000 (hours, minutes, seconds and miliseconds) to the current od date. A parameter can be used to set the 0 time to the endDate (when using ranged dates).\r\n\r\n- *Usage:* beginOfDay( [useEndDate] )\r\n- *Parameters:*\r\n  - *[useEndDate]* Boolean, to specify if the time 0:0:00 will be set to the end date.\r\n- *Return:* none\r\n- *E.g.*\r\n```javascript\r\nod.beginOfDay();\r\nod.range('week').beginOfDay();\r\nod.range('week').beginOfDay( true );\r\n```\r\n\r\n#### endOfDay()\r\nSet time 23:59:59 9999 (hours, minutes, seconds and miliseconds) to the current od date. A parameter can be used to set the 0 time to the endDate (when using ranged dates).\r\n\r\n- *Usage:* endOfDay( [useEndDate] )\r\n- *Parameters:*\r\n  - *[useEndDate]* Boolean, to specify if the time 0:0:00 will be set to the end date.\r\n- *Return:* none\r\n- *Example:*\r\n```javascript\r\nod.endOfDay('end');\r\nod.range('week').endOfDay( true );\r\n```\r\n\r\n### 3) Formatting\r\n\r\n#### output()\r\nReturns the current values of the date or an object with two dates (startDate and endDate).  \r\nThe method will return a date object (or a pair of such) if no parameter is used.\r\nIf a parameter is used the method will return formatted string (or a pair of such).\r\n\r\n- *Usage:* .output( [format] )\r\n- *Parameters:*\r\n  - *[format]* String with a standar js date format, more on js date formats on the [Language Specification](http://www.ecma-international.org/ecma-262/6.0/#sec-date-time-string-format).\r\n- *Return:* Date object or formatted string\r\n- *Example:*\r\n```javascript\r\nod.output();\r\nod.simple().output();\r\nod.range('week').output();\r\nod.range('week').output(1);\r\n```\r\n\r\n### 4) Special functions:\r\n\r\nThese methods should be used directly, no configuration needed.\r\n\r\n#### getHolidays()\r\n\r\nReturns an array with the holidays for the location on the parameters. US is the default location. You can use offset method to retrieve holidays from other years.\r\n\r\n- *Usage:* getHolidays( [country_code] )\r\n- *Parameters:*\r\n  - *[country_code]* String with the country. Possible values: us|mx.\r\n- *Return:* array with date objects\r\n- *Example:*\r\n```javascript\r\nod.output();\r\nod.simple().output();\r\nod.range('week').output();\r\nod.range('week').output(1);\r\n```\r\n\r\n### TODO\r\n\r\nSome updates to be including in future releases:\r\n\r\n- Custom date output format.\r\n- Fiscal Weeks.\r\n- First/last day of month/year.\r\n- Mutiple dates array results, to be used directly in documents.\r\n- Test cases.\r\n\r\n## License\r\n\r\noffsetDates.js is freely distributable under the terms of the [MIT license](https://github.com/jocelo/offset-dates/blob/master/LICENSE).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}