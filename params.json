{"name":"Offset-dates","tagline":"js library to play with dates","body":"# offset-dates\r\njs library to play with dates\r\n\r\nLightweigth library to calculate different dates and ranges.\r\n\r\nCurrent version 0.1.11\r\n\r\nTo start using the offsetdate library you just need to include the js file into your code.\r\n\r\n```html\r\n<script src=\"offsetdates.min.js\"></script>\r\n```\r\n\r\nYou don't have to initialize the library, once the js file is included the object is ready to be used.\r\nYou can (and it's strongly recommended that you should) chain functions... even when you can do this:\r\n\r\n```javascript\r\nvar date1 = od();\r\ndate1.range();\r\ndate1.offset(-2,'weeks');\r\ndate1.output();\r\n```\r\n\r\nyou should do this instead:\r\n\r\n```javascript\r\nod().range('week').offset(-2, 'weeks').output();\r\n```\r\n\r\nThe offsetdates methods (od from now on) can be divided into sections:\r\n\r\n(1) initialization | (2) operations | (3) formatting | (4) special functions\r\n\r\n### 1) Initialization\r\n\r\n#### single\r\ndefault usage, one date will be created\r\nusage od.single();\r\nno parameters\r\nreturns: none\r\n\r\nexamples:\r\n\r\n| Code        | Output |\r\n| ----------- | ------ |\r\n| od.single() |        |\r\n\r\n#### range\r\nYou can calculate dates or ranges of dates. two dates will be created: startDate and endDate\r\n\r\nusage range([period])\r\nwhere\r\n    period: week|month|year|quarter\r\nreturns: none\r\n\r\nexample:\r\n| Code        | Output |\r\n| ----------- | ------ |\r\n| od.range()  |        |\r\n| od.range('week') |        |\r\n\r\nod()\r\nod().range()\r\nod().range('week')\r\n\r\n### 2) Operations\r\n\r\n#### offset\r\noffset an specific period of time to the calculated dates\r\nusage: .offset(amount,period)\r\nwhere:\r\n    amount: Integer number for the jump\r\n    period: string representation of period, can be weeks|months|years|periods\r\nreturns: none\r\n\r\nexamples:\r\nod.range('week').offset(1,'week').output()\r\nod.range('week').offset(-1,'week').output()\r\n\r\n#### beginOfDay\r\nset the time 0:0:00 0000 (hours, minutes, seconds and miliseconds to the specified date, the parameter can be used to set the begin of date to the endDate, for when you are using range\r\nusage: beginOfDay([useEndDate])\r\nwhere:\r\n    endDate: if specified, the time 0:0:00 will be set to the end date (when range used)\r\nreturns: none\r\n\r\n#### endOfDay\r\nset the time 23:59:59 99 (hours, minutes, seconds and miliseconds to the specified date, the parameter can be used to set the begin of date to the endDate, for when you are using range\r\nusage: endOfDay([useEndDate])\r\nwhere:\r\n    endDate: if specified, the time 0:0:00 will be set to the end date (when range used)\r\nreturns: none\r\n\r\n### 3) Formatting\r\n#### output\r\nReturns the calculated dates, if no parameter is used, the method will return the date objects, string formatted otherwise\r\nusage output([format])\r\nwhere\r\n    format can be an standar js date format \r\nreturns: none\r\n\r\nexamples:\r\nod.output()\r\nod.simple().output\r\nod.range('week').output()\r\nod.range('week').output(1)\r\n\r\n### 4) Special functions:\r\nThese methods should be used directly, no configuration needed.\r\n\r\n#### getHolidays\r\nget an array with the holidays for the specified location\r\nusage: getHolidays([country])\r\nwhere:\r\n    country could be us|mx\r\nby default, the us holidays will be returned\r\nreturns: array with date objects, from holidays within specified year\r\n( can be used with offset, to retrieve holidays from a specific year )\r\n\r\n### TODO\r\nIn future commits, the following items will be included:\r\n* Custom date for library initialization\r\n* Fiscal Week of current week\r\n* First day of month\r\n* Last day of month\r\n* Mutiple dates array results, to be used in select\r\n* Test cases\r\n\r\n## License\r\n\r\noffsetDates.js is freely distributable under the terms of the [MIT license](https://github.com).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}